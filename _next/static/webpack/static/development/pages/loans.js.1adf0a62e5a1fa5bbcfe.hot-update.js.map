{"version":3,"file":"static/webpack/static/development/pages/loans.js.1adf0a62e5a1fa5bbcfe.hot-update.js","sources":["webpack:///./containers/Loan/List/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box } from 'grommet';\nimport { connect } from 'react-redux';\nimport { LoansState, loadLoans } from '../../../ducks/loans';\nimport { AnalyticsState, loadAnalyticsData } from '../../../ducks/analytics';\nimport { baseToDisplay } from 'tinlake';\nimport { Spinner } from '@centrifuge/axis-spinner';\nimport { AuthState, loadUserProxies } from '../../../ducks/auth';\nimport LoanListData from '../../../components/Loan/List';\nimport NumberDisplay from '../../../components/NumberDisplay';\nimport DashboardMetric from '../../../components/DashboardMetric';\nimport { Loan } from '../../../services/tinlake/actions';\nimport { Erc20Widget } from '../../../components/Investment/TrancheMetric/erc20'\nimport DAI from \"../../../static/dai.json\"\n\ninterface Props {\n  tinlake: any;\n  loans?: LoansState;\n  loadLoans?: (tinlake: any) => Promise<void>;\n  loadAnalyticsData?: (tinlake: any) => Promise<void>;\n  loadUserProxies?: () => Promise<void>;\n  auth?: AuthState;\n  analytics?: AnalyticsState\n}\n\nclass LoanList extends React.Component<Props> {\n  componentWillMount() {\n    const { loadLoans, loadAnalyticsData, loadUserProxies, tinlake } = this.props\n    loadLoans && loadLoans(tinlake);\n    loadAnalyticsData && loadAnalyticsData(tinlake);\n    loadUserProxies && loadUserProxies();\n  }\n\n  render() {\n    const { loans, analytics, auth, tinlake: { ethConfig: { from: ethFrom } } } = this.props;\n    const user = auth && auth.user\n    const proxies =  user && user.proxies || [];\n    const availableFunds = analytics && analytics.data && analytics.data.availableFunds || 0;\n\n    if (loans!.loansState === 'loading') {\n      return <Spinner height={'calc(100vh - 89px - 84px)'} message={'Loading...'} />;\n    }\n\n    let filteredLoans: Array<Loan> = [];\n    const hasAdminPermissions = user && user.permissions.canSetInterestRate;\n    if (loans && loans.loans && loans.loansState === 'found' && user) {\n      filteredLoans = hasAdminPermissions  ? loans.loans : loans.loans.filter(l => proxies.includes(l.ownerOf));\n    }\n\n    return <Box >\n\n      <Box width=\"medium\" direction=\"row\" basis={'full'} gap=\"medium\" alignSelf=\"center\" align=\"center\" margin={{ bottom: 'medium' }}>\n        <DashboardMetric label=\"Total funds available for borrowing\">\n          <Erc20Widget value={availableFunds.toString()} tokenData={DAI} precision={12} />  \n        </DashboardMetric>\n      </Box>\n      \n      <LoanListData loans={filteredLoans} proxies={proxies} userAddress={ethFrom}> </LoanListData>\n    </Box>;\n  }\n}\n\nexport default connect(state => state, { loadLoans, loadAnalyticsData, loadUserProxies })(LoanList);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAWA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AAlCA;AACA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}