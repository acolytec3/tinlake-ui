{"version":3,"file":"static/webpack/static/development/pages/investments/investor.js.7b11e35f98f0a93f3dbb.hot-update.js","sources":["webpack:///./containers/Investment/Redeem/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, FormField, Button, Text } from 'grommet';\nimport NumberInput from '../../../components/NumberInput';\nimport { Investor, Tranche, redeem } from '../../../services/tinlake/actions';\nimport { transactionSubmitted, responseReceived } from '../../../ducks/transactions';\nimport { baseToDisplay, displayToBase } from 'tinlake';\nimport { loadInvestor } from '../../../ducks/investments';\nimport { loadAnalyticsData } from '../../../ducks/analytics';\nimport { connect } from 'react-redux';\nimport { authTinlake } from '../../../services/tinlake';\nimport BN from 'bn.js';\nimport { Erc20Widget } from '../../../components/Investment/TrancheMetric/erc20';\nimport DAI from \"../../../static/dai.json\";\nimport DROP from \"../../../static/drop.json\";\n\ninterface Props {\n  investor: Investor;\n  tinlake: any;\n  loadInvestor?: (tinlake: any, address: string, refresh?: boolean) => Promise<void>;\n  loadAnalyticsData?: (tinlake: any) => Promise<void>;\n  transactionSubmitted?: (loadingMessage: string) => Promise<void>;\n  responseReceived?: (successMessage: string | null, errorMessage: string | null) => Promise<void>;\n  tranche: Tranche;\n}\n\ninterface State {\n  redeemAmount: string;\n}\n\nclass InvestorRedeem extends React.Component<Props, State> {\n\n  componentWillMount() {\n    this.setState({ redeemAmount: '0' });\n  }\n\n  redeem = async () => {\n    const { tranche, transactionSubmitted, responseReceived, loadInvestor, loadAnalyticsData, investor, tinlake } = this.props;\n    const { redeemAmount } = this.state;\n    transactionSubmitted && transactionSubmitted(\"Redeem initiated. Please confirm the pending transactions in MetaMask. Processing may take a few seconds.\");\n    try {\n      await authTinlake();\n      const res = await redeem(tinlake, redeemAmount, tranche.type);\n      if (res && res.errorMsg) {\n        responseReceived && responseReceived(null, `Redeem failed. ${res.errorMsg}`);\n        return;\n      }\n      responseReceived && responseReceived(`Redeem successful. Please check your wallet.`, null);\n      loadInvestor && loadInvestor(tinlake, investor.address);\n      loadAnalyticsData && loadAnalyticsData(tinlake);\n    } catch (e) {\n      responseReceived && responseReceived(null, `Redeem failed. ${e}`);\n      console.log(e);\n    }\n  }\n\n  render() {\n    const { investor, tranche } = this.props;\n    const { redeemAmount } = this.state;\n    const trancheValues = investor[tranche.type];\n    const maxRedeemAmount = trancheValues.maxRedeem || '0';\n    const tokenBalance = trancheValues.tokenBalance || '0';\n    const redeemLimitSet = maxRedeemAmount.toString() !== '0';\n    const limitOverflow = (new BN(redeemAmount).cmp(new BN(maxRedeemAmount)) > 0);\n    const availableTokensOverflow = (new BN(redeemAmount).cmp(new BN(tokenBalance)) > 0);\n    const redeemEnabled = redeemLimitSet && !limitOverflow && !availableTokensOverflow;\n\n    return <Box basis={'1/4'} gap=\"medium\" margin={{ right: \"large\" }}>\n      <Box gap=\"medium\">\n        <FormField label=\"Redeem token\">\n        <Erc20Widget limit={redeemAmount.toString()} tokenData={DROP} precision={18} onValueChanged={(value) =>\n                this.setState({ redeemAmount: displayToBase(value, 18) })} />  \n        </FormField>\n      </Box>\n      <Box align=\"start\">\n        <Button onClick={this.redeem} primary label=\"Redeem\" disabled = {!redeemEnabled}/>\n\n        {limitOverflow && !availableTokensOverflow  &&\n          <Box margin={{top: \"small\"}}>\n            Max redeem amount exceeded.   <br /> \n            Amount has to be lower then <br />\n            <Text weight=\"bold\">\n              {`${baseToDisplay(maxRedeemAmount, 18)}`}\n            </Text>\n          </Box>\n        }\n\n        {availableTokensOverflow  &&\n          <Box margin={{top: \"small\"}}>\n            Available token amount exceeded.   <br /> \n            Amount has to be lower then <br />\n            <Text weight=\"bold\">\n              {`${baseToDisplay(tokenBalance, 18)}`}\n            </Text>\n          </Box>\n        }\n\n      </Box>\n    </Box>;\n  }\n}\n\nexport default connect(state => state, { loadInvestor, loadAnalyticsData, transactionSubmitted, responseReceived })(InvestorRedeem);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAOA;AARA;AACA;AADA;AAWA;AACA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AAeA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AALA;AACA;AAAA;AAAA;AACA;;;AAsrEA;AACA;AAuEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}