{"version":3,"file":"static/webpack/static/development/pages/investments/investor.js.bde419c0588bc8438c48.hot-update.js","sources":["webpack:///./containers/Investment/Allowance/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, FormField, Button, Heading } from 'grommet';\nimport { Investor, TrancheType, setAllowance } from '../../../services/tinlake/actions';\nimport { transactionSubmitted, responseReceived } from '../../../ducks/transactions';\nimport { baseToDisplay, displayToBase } from 'tinlake';\nimport { loadInvestor } from '../../../ducks/investments';\nimport { connect } from 'react-redux';\nimport { authTinlake } from '../../../services/tinlake';\nimport { Erc20Widget } from '../../../components/Investment/TrancheMetric/erc20';\nimport DAI from \"../../../static/dai.json\";\nimport DROP from \"../../../static/drop.json\";\n\ninterface Props {\n  investor: Investor;\n  tinlake: any;\n  loadInvestor?: (tinlake: any, address: string, refresh?: boolean) => Promise<void>;\n  transactionSubmitted?: (loadingMessage: string) => Promise<void>;\n  responseReceived?: (successMessage: string | null, errorMessage: string | null) => Promise<void>;\n  trancheType: TrancheType;\n}\n\ninterface State {\n  supplyAmount: string;\n  redeemAmount: string;\n  currentSupplyLimit: string;\n  currentRedeemLimit: string;\n}\n\nclass InvestorAllowance extends React.Component<Props, State> {\n\n  updateLimits() {\n    if (!this.state) {\n      return\n    }\n    const { investor, trancheType } = this.props;\n    const { currentSupplyLimit, currentRedeemLimit } = this.state;\n    const tranche = investor[trancheType];\n    if (currentSupplyLimit != tranche.maxSupply || currentRedeemLimit != tranche.maxRedeem ) {\n      this.setState({ currentSupplyLimit: tranche && tranche.maxSupply || '0', currentRedeemLimit: tranche && tranche.maxRedeem || '0' });\n      this.setState({ supplyAmount: tranche && tranche.maxSupply || '0', redeemAmount: tranche && tranche.maxRedeem || '0' });\n    }\n  }\n  componentWillMount() {\n    this.setState({\n      supplyAmount: '0',\n      redeemAmount: '0',\n      currentSupplyLimit: '0',\n      currentRedeemLimit: '0'\n    });\n    this.updateLimits();\n  }\n\n  setAllowance = async () => {\n    this.props.transactionSubmitted && this.props.transactionSubmitted(\"Allowance initiated. Please confirm the pending transactions in MetaMask. Processing may take a few seconds.\");\n    try {\n      await authTinlake();\n      this.updateLimits();\n      const { supplyAmount, redeemAmount } = this.state;\n\n      const { investor, trancheType, tinlake } = this.props;\n      const res = await setAllowance(tinlake, investor.address, supplyAmount, redeemAmount, trancheType);\n      if (res && res.errorMsg) {\n        this.props.responseReceived && this.props.responseReceived(null, `Allowance failed. ${res.errorMsg}`);\n        return;\n      }\n      this.props.responseReceived && this.props.responseReceived(`Allowance successful.`, null);\n      this.props.loadInvestor && this.props.loadInvestor(tinlake, investor.address);\n    } catch (e) {\n      this.props.responseReceived && this.props.responseReceived(null, `Allowance failed. ${e}`);\n      console.log(e);\n    }\n  }\n\n  render() {\n    const { supplyAmount, redeemAmount } = this.state;\n    this.updateLimits();\n    return <Box>\n      <Box gap=\"medium\" align=\"start\" margin={{ bottom: \"medium\" }} >\n        <Heading level=\"4\" margin=\"none\"> Set allowance </Heading>\n      </Box>\n      <Box gap=\"medium\" direction=\"row\" margin={{ right: \"large\" }}>\n        <Box basis={'1/3'}>\n          <FormField label=\"Max investment amount\">\n          <Erc20Widget limit={supplyAmount.toString()} tokenData={DAI} precision={18} onValueChanged={(value) =>\n                this.setState({ supplyAmount: displayToBase(value, 18) })} />  \n          </FormField>\n        </Box>\n        <Box basis={'1/3'}>\n          <FormField label=\"Max redeem amount\">\n          <Erc20Widget limit={redeemAmount.toString()} tokenData={DROP} precision={18} onValueChanged={(value) =>\n                this.setState({ redeemAmount: displayToBase(value, 18) })} />  \n          </FormField>\n        </Box>\n        <Box >\n          <Button onClick={this.setAllowance} primary label=\"Set Allowance\" />\n        </Box>\n      </Box>\n    </Box>;\n  }\n}\n\nexport default connect(state => state, { loadInvestor, transactionSubmitted, responseReceived })(InvestorAllowance);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AASA;AAVA;AACA;AADA;AAaA;AACA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAvBA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;AAutEA;AACA;AAwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}