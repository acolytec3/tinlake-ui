{"version":3,"file":"static/webpack/static/development/pages/investments/investor.js.ffc15ae0ba603b8025a0.hot-update.js","sources":["webpack:///./containers/Investment/Supply/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, FormField, Button, Text } from 'grommet';\nimport { Investor, TrancheType, supply } from '../../../services/tinlake/actions';\nimport { transactionSubmitted, responseReceived } from '../../../ducks/transactions';\nimport { displayToBase } from 'tinlake';\nimport { loadInvestor } from '../../../ducks/investments';\nimport { loadAnalyticsData } from '../../../ducks/analytics';\nimport { connect } from 'react-redux';\nimport { authTinlake } from '../../../services/tinlake';\nimport BN from 'bn.js';\nimport { Erc20Widget } from '../../../components/Investment/TrancheMetric/erc20';\nimport DAI from \"../../../static/dai.json\";\n\n\ninterface Props {\n  investor: Investor;\n  tinlake: any;\n  loadInvestor?: (tinlake: any, address: string, refresh?: boolean) => Promise<void>;\n  loadAnalyticsData?: (tinlake: any) => Promise<void>;\n  transactionSubmitted?: (loadingMessage: string) => Promise<void>;\n  responseReceived?: (successMessage: string | null, errorMessage: string | null) => Promise<void>;\n  trancheType: TrancheType\n}\n\ninterface State {\n  supplyAmount: string;\n}\n\nclass InvestorSupply extends React.Component<Props, State> {\n\n  componentWillMount() {\n    this.setState({ supplyAmount: '0' });\n  }\n\n  supply = async () => {\n    const { transactionSubmitted, responseReceived, trancheType, tinlake, investor, loadInvestor, loadAnalyticsData } = this.props;\n    const { supplyAmount } = this.state;\n    transactionSubmitted && transactionSubmitted(\"Investment initiated. Please confirm the pending transactions in MetaMask. Processing may take a few seconds.\");\n    try {\n      await authTinlake();\n      const res = await supply(tinlake, supplyAmount, trancheType);\n      if (res && res.errorMsg) {\n        responseReceived && responseReceived(null, `Investment failed. ${res.errorMsg}`);\n        return;\n      }\n      if (trancheType === 'junior') {\n        responseReceived && responseReceived(`Investment successful. Please check your wallet for TIN tokens.`, null);\n      } else if (trancheType === 'senior') {\n        responseReceived && responseReceived(`Investment successful. Please check your wallet for DROP tokens.`, null);\n      }\n      loadInvestor && loadInvestor(tinlake, investor.address);\n      loadAnalyticsData && loadAnalyticsData(tinlake);\n    } catch (e) {\n      responseReceived && responseReceived(null, `Investment failed. ${e}`);\n      console.log(e);\n    }\n  }\n\n  render() {\n    const { investor, trancheType } = this.props;\n    const { supplyAmount } = this.state;\n    const trancheValues = investor[trancheType];\n    const maxSupplyAmount =  trancheValues.maxSupply || '0';\n    const maxSupplyOverflow =  (new BN(supplyAmount).cmp(new BN(maxSupplyAmount)) > 0);\n    const canSupply = maxSupplyAmount.toString() != '0' && !maxSupplyOverflow;\n    return <Box basis={'1/4'} gap=\"medium\" margin={{ right: \"large\" }}>\n      <Box gap=\"medium\">\n        <FormField label=\"Investment amount\">\n        <Erc20Widget limit={maxSupplyAmount.toString()} tokenData={DAI} precision={18} onValueChanged={(value) =>\n                {this.setState({ supplyAmount: displayToBase(value, 18) }); console.log(\"Supply is\" + supplyAmount)}} />  \n        </FormField>\n      </Box>\n      <Box align=\"start\">\n        <Button onClick={this.supply} primary label=\"Invest\" disabled={!canSupply }  />\n        {maxSupplyOverflow &&\n         <Box margin={{top: \"small\"}}>\n             Max investment amount exceeded. <br /> \n             Amount has to be lower then <br />\n             <Text weight=\"bold\">\n              {`${maxSupplyAmount.toString()}`}\n             </Text>\n           </Box>\n        }\n      </Box>\n    </Box>;\n  }\n}\n\nexport default connect(state => state, { loadInvestor, loadAnalyticsData, transactionSubmitted, responseReceived })(InvestorSupply);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAOA;AARA;AACA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAmBA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AALA;AACA;AAAA;AAAA;AACA;;;AA0BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAzDA;AACA;AA2DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}